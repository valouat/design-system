{"ast":null,"code":"import\"core-js/modules/es.object.assign\";import _objectWithoutProperties from\"/Users/val/Documents/Ouat/ouat-design-system/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import _taggedTemplateLiteral from\"/Users/val/Documents/Ouat/ouat-design-system/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";function _templateObject2(){var data=_taggedTemplateLiteral([\"\\n  fill: currentColor;\\n\"]);_templateObject2=function(){return data};return data}function _templateObject(){var data=_taggedTemplateLiteral([\"\\n  display: \",\";\\n  vertical-align: middle;\\n\\n  shape-rendering: inherit;\\n  transform: translate3d(0, 0, 0);\\n\"]);_templateObject=function(){return data};return data}import React from\"react\";import styled from\"styled-components\";import{icons}from\"./shared/icons\";var Svg=styled.svg(_templateObject(),function(props){return props.block?\"block\":\"inline-block\"}),Path=styled.path(_templateObject2());/**\n * An Icon is a piece of visual element, but we must ensure its accessibility while using it.\n * It can have 2 purposes:\n *\n * - *decorative only*: for example, it illustrates a label next to it. We must ensure that it is ignored by screen readers, by setting `aria-hidden` attribute (ex: `<Icon icon=\"check\" aria-hidden />`)\n * - *non-decorative*: it means that it delivers information. For example, an icon as only child in a button. The meaning can be obvious visually, but it must have a proper text alternative via `aria-label` for screen readers. (ex: `<Icon icon=\"print\" aria-label=\"Print this document\" />`)\n */export function Icon(_ref){var icon=_ref.icon,block=_ref.block,props=_objectWithoutProperties(_ref,[\"icon\",\"block\"]);return/*#__PURE__*/React.createElement(Svg,Object.assign({viewBox:\"0 0 1024 1024\",width:\"20px\",height:\"20px\",block:block},props),/*#__PURE__*/React.createElement(Path,{d:icons[icon]}))}Icon.displayName=\"Icon\";Icon.defaultProps={block:!1};Icon.__docgenInfo={description:\"An Icon is a piece of visual element, but we must ensure its accessibility while using it.\\nIt can have 2 purposes:\\n\\n- *decorative only*: for example, it illustrates a label next to it. We must ensure that it is ignored by screen readers, by setting `aria-hidden` attribute (ex: `<Icon icon=\\\"check\\\" aria-hidden />`)\\n- *non-decorative*: it means that it delivers information. For example, an icon as only child in a button. The meaning can be obvious visually, but it must have a proper text alternative via `aria-label` for screen readers. (ex: `<Icon icon=\\\"print\\\" aria-label=\\\"Print this document\\\" />`)\",methods:[],displayName:\"Icon\",props:{block:{defaultValue:{value:\"false\",computed:!1},type:{name:\"bool\"},required:!1,description:\"\"},icon:{type:{name:\"string\"},required:!0,description:\"\"}}};if(\"undefined\"!=typeof STORYBOOK_REACT_CLASSES){STORYBOOK_REACT_CLASSES[\"src/Icon.js\"]={name:\"Icon\",docgenInfo:Icon.__docgenInfo,path:\"src/Icon.js\"}}","map":{"version":3,"sources":["/Users/val/Documents/Ouat/ouat-design-system/src/Icon.js"],"names":["React","styled","icons","Svg","svg","props","block","Path","path","Icon","icon","defaultProps"],"mappings":"ywBAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,MAAOC,CAAAA,MAAP,KAAmB,mBAAnB,CACA,OAASC,KAAT,KAAsB,gBAAtB,C,GAEMC,CAAAA,GAAG,CAAGF,MAAM,CAACG,GAAV,mBACI,SAAAC,KAAK,QAAKA,CAAAA,KAAK,CAACC,KAAN,CAAc,OAAd,CAAwB,cAA7B,CADT,C,CAQHC,IAAI,CAAGN,MAAM,CAACO,IAAV,oB,CAIV;;;;;;GAOA,MAAO,SAASC,CAAAA,IAAT,MAAyC,IAAzBC,CAAAA,IAAyB,MAAzBA,IAAyB,CAAnBJ,KAAmB,MAAnBA,KAAmB,CAATD,KAAS,iDAC9C,mBACE,oBAAC,GAAD,gBAAK,OAAO,CAAC,eAAb,CAA6B,KAAK,CAAC,MAAnC,CAA0C,MAAM,CAAC,MAAjD,CAAwD,KAAK,CAAEC,KAA/D,EAA0ED,KAA1E,eACE,oBAAC,IAAD,EAAM,CAAC,CAAEH,KAAK,CAACQ,IAAD,CAAd,EADF,CAIH,CANeD,I,oBAahBA,IAAI,CAACE,YAAL,CAAoB,CAClBL,KAAK,GADa,CAApB,C","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { icons } from './shared/icons';\n\nconst Svg = styled.svg`\n  display: ${props => (props.block ? 'block' : 'inline-block')};\n  vertical-align: middle;\n\n  shape-rendering: inherit;\n  transform: translate3d(0, 0, 0);\n`;\n\nconst Path = styled.path`\n  fill: currentColor;\n`;\n\n/**\n * An Icon is a piece of visual element, but we must ensure its accessibility while using it.\n * It can have 2 purposes:\n *\n * - *decorative only*: for example, it illustrates a label next to it. We must ensure that it is ignored by screen readers, by setting `aria-hidden` attribute (ex: `<Icon icon=\"check\" aria-hidden />`)\n * - *non-decorative*: it means that it delivers information. For example, an icon as only child in a button. The meaning can be obvious visually, but it must have a proper text alternative via `aria-label` for screen readers. (ex: `<Icon icon=\"print\" aria-label=\"Print this document\" />`)\n */\nexport function Icon({ icon, block, ...props }) {\n  return (\n    <Svg viewBox=\"0 0 1024 1024\" width=\"20px\" height=\"20px\" block={block} {...props}>\n      <Path d={icons[icon]} />\n    </Svg>\n  );\n}\n\nIcon.propTypes = {\n  icon: PropTypes.string.isRequired,\n  block: PropTypes.bool,\n};\n\nIcon.defaultProps = {\n  block: false,\n};\n"]},"metadata":{},"sourceType":"module"}