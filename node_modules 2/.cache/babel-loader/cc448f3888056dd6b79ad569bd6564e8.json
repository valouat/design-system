{"ast":null,"code":"import _objectWithoutProperties from \"/Users/val/Documents/Ouat/ouat-design-system/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/val/Documents/Ouat/ouat-design-system/src/Icon.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { icons } from './shared/icons';\nconst Svg = styled.svg`\n  display: ${props => props.block ? 'block' : 'inline-block'};\n  vertical-align: middle;\n\n  shape-rendering: inherit;\n  transform: translate3d(0, 0, 0);\n`;\nconst Path = styled.path`\n  fill: currentColor;\n`;\n/**\n * An Icon is a piece of visual element, but we must ensure its accessibility while using it.\n * It can have 2 purposes:\n *\n * - *decorative only*: for example, it illustrates a label next to it. We must ensure that it is ignored by screen readers, by setting `aria-hidden` attribute (ex: `<Icon icon=\"check\" aria-hidden />`)\n * - *non-decorative*: it means that it delivers information. For example, an icon as only child in a button. The meaning can be obvious visually, but it must have a proper text alternative via `aria-label` for screen readers. (ex: `<Icon icon=\"print\" aria-label=\"Print this document\" />`)\n */\n\nexport function Icon(_ref) {\n  let {\n    icon,\n    block\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"icon\", \"block\"]);\n\n  return /*#__PURE__*/React.createElement(Svg, Object.assign({\n    viewBox: \"0 0 1024 1024\",\n    width: \"20px\",\n    height: \"20px\",\n    block: block\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Path, {\n    d: icons[icon],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }));\n}\nIcon.displayName = \"Icon\";\nIcon.propTypes = {\n  icon: PropTypes.string.isRequired,\n  block: PropTypes.bool\n};\nIcon.defaultProps = {\n  block: false\n};\nIcon.__docgenInfo = {\n  \"description\": \"An Icon is a piece of visual element, but we must ensure its accessibility while using it.\\nIt can have 2 purposes:\\n\\n- *decorative only*: for example, it illustrates a label next to it. We must ensure that it is ignored by screen readers, by setting `aria-hidden` attribute (ex: `<Icon icon=\\\"check\\\" aria-hidden />`)\\n- *non-decorative*: it means that it delivers information. For example, an icon as only child in a button. The meaning can be obvious visually, but it must have a proper text alternative via `aria-label` for screen readers. (ex: `<Icon icon=\\\"print\\\" aria-label=\\\"Print this document\\\" />`)\",\n  \"methods\": [],\n  \"displayName\": \"Icon\",\n  \"props\": {\n    \"block\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"icon\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/Icon.js\"] = {\n    name: \"Icon\",\n    docgenInfo: Icon.__docgenInfo,\n    path: \"src/Icon.js\"\n  };\n}","map":{"version":3,"sources":["/Users/val/Documents/Ouat/ouat-design-system/src/Icon.js"],"names":["React","PropTypes","styled","icons","Svg","svg","props","block","Path","path","Icon","icon","propTypes","string","isRequired","bool","defaultProps"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,MAAMC,GAAG,GAAGF,MAAM,CAACG,GAAI;aACVC,KAAK,IAAKA,KAAK,CAACC,KAAN,GAAc,OAAd,GAAwB,cAAgB;;;;;CAD/D;AAQA,MAAMC,IAAI,GAAGN,MAAM,CAACO,IAAK;;CAAzB;AAIA;;;;;;;;AAOA,OAAO,SAASC,IAAT,OAAyC;AAAA,MAA3B;AAAEC,IAAAA,IAAF;AAAQJ,IAAAA;AAAR,GAA2B;AAAA,MAATD,KAAS;;AAC9C,sBACE,oBAAC,GAAD;AAAK,IAAA,OAAO,EAAC,eAAb;AAA6B,IAAA,KAAK,EAAC,MAAnC;AAA0C,IAAA,MAAM,EAAC,MAAjD;AAAwD,IAAA,KAAK,EAAEC;AAA/D,KAA0ED,KAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACE,oBAAC,IAAD;AAAM,IAAA,CAAC,EAAEH,KAAK,CAACQ,IAAD,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD;AANeD,I;AAQhBA,IAAI,CAACE,SAAL,GAAiB;AACfD,EAAAA,IAAI,EAAEV,SAAS,CAACY,MAAV,CAAiBC,UADR;AAEfP,EAAAA,KAAK,EAAEN,SAAS,CAACc;AAFF,CAAjB;AAKAL,IAAI,CAACM,YAAL,GAAoB;AAClBT,EAAAA,KAAK,EAAE;AADW,CAApB","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { icons } from './shared/icons';\n\nconst Svg = styled.svg`\n  display: ${props => (props.block ? 'block' : 'inline-block')};\n  vertical-align: middle;\n\n  shape-rendering: inherit;\n  transform: translate3d(0, 0, 0);\n`;\n\nconst Path = styled.path`\n  fill: currentColor;\n`;\n\n/**\n * An Icon is a piece of visual element, but we must ensure its accessibility while using it.\n * It can have 2 purposes:\n *\n * - *decorative only*: for example, it illustrates a label next to it. We must ensure that it is ignored by screen readers, by setting `aria-hidden` attribute (ex: `<Icon icon=\"check\" aria-hidden />`)\n * - *non-decorative*: it means that it delivers information. For example, an icon as only child in a button. The meaning can be obvious visually, but it must have a proper text alternative via `aria-label` for screen readers. (ex: `<Icon icon=\"print\" aria-label=\"Print this document\" />`)\n */\nexport function Icon({ icon, block, ...props }) {\n  return (\n    <Svg viewBox=\"0 0 1024 1024\" width=\"20px\" height=\"20px\" block={block} {...props}>\n      <Path d={icons[icon]} />\n    </Svg>\n  );\n}\n\nIcon.propTypes = {\n  icon: PropTypes.string.isRequired,\n  block: PropTypes.bool,\n};\n\nIcon.defaultProps = {\n  block: false,\n};\n"]},"metadata":{},"sourceType":"module"}